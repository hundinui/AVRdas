#ifndef INS_H
#define INS_H

//#define TABLE_SIZE (sizeof(instruction_table) / sizeof(instruction_table[0]))

struct instruction {
	const char *mnemonic;	// mnemonics to output
	unsigned short opcode;	// opcode 
	unsigned short mask;	// mask bits for the operands
	int flag;				// flags, 1 - operates on IO register
	int words;				// size of opcode
};

const struct instruction instruction_table[] = {
	{ "clc",	0x9488, 0x0000, 0, 1 },
	{ "clh",	0x94d8, 0x0000, 0, 1 },
	{ "cli",	0x94f8, 0x0000, 0, 1 },
	{ "cln",	0x94a8, 0x0000, 0, 1 },
	{ "cls",	0x94c8, 0x0000, 0, 1 },
	{ "clt",	0x94e8, 0x0000, 0, 1 },
	{ "clv",	0x94b8, 0x0000, 0, 1 },
	{ "clz",	0x9498, 0x0000, 0, 1 },
	{ "sec",	0x9408, 0x0000, 0, 1 },
	{ "seh",	0x9458, 0x0000, 0, 1 },
	{ "sei",	0x9478, 0x0000, 0, 1 },
	{ "sen",	0x9428, 0x0000, 0, 1 },
	{ "ses",	0x9448, 0x0000, 0, 1 },
	{ "set",	0x9468, 0x0000, 0, 1 },
	{ "sev",	0x9438, 0x0000, 0, 1 },
	{ "sez",	0x9418, 0x0000, 0, 1 },
	{ "bclr",	0x9488, 0x0070, 0, 1 },
	{ "bset",	0x9408, 0x0070, 0, 1 },
	{ "icall",	0x9509, 0x0000, 0, 1 },
	{ "ijmp",	0x9409, 0x0000, 0, 1 },
	{ "lpm",	0x9004, 0x01f1, 0, 1 },
	{ "elpm",	0x9006, 0x01f1, 0, 1 },
	{ "nop",	0x0000, 0x0000, 0, 1 },
	{ "ret",	0x9508, 0x0000, 0, 1 },
	{ "reti",	0x9518, 0x0000, 0, 1 },
	{ "sleep",	0x9588, 0x0000, 0, 1 },
	{ "break",	0x9598, 0x0000, 0, 1 },
	{ "wdr",	0x95a8, 0x0000, 0, 1 },
	{ "spm",	0x95e8, 0x0000, 0, 1 },
	{ "adc",	0x1c00, 0x03ff, 0, 1 },
	{ "add",	0x0c00, 0x03ff, 0, 1 },
	{ "and",	0x2000, 0x03ff, 0, 1 },
	{ "cp",		0x1400, 0x03ff, 0, 1 },
	{ "cpc",	0x0400, 0x03ff, 0, 1 },
	{ "cpse",	0x1000, 0x03ff, 0, 1 },
	{ "eor",	0x2400, 0x03ff, 0, 1 },
	{ "mov",	0x2c00, 0x03ff, 0, 1 },
	{ "mul",	0x9c00, 0x03ff, 0, 1 },
	{ "or",		0x2800, 0x03ff, 0, 1 },
	{ "sbc",	0x0800, 0x03ff, 0, 1 },
	{ "sub",	0x1800, 0x03ff, 0, 1 },
	{ "clr",	0x2400, 0x03ff, 0, 1 }, // should remove, but removing causes a bug and it will be properly detected as EOR so not messing with it now
	{ "lsl",	0x0c00, 0x03ff, 0, 1 },
	{ "rol",	0x1c00, 0x03ff, 0, 1 },
	{ "tst",	0x2000, 0x03ff, 0, 1 },
	{ "andi",	0x7000, 0x0fff, 0, 1 },
	{ "cbr",	0x7000, 0x0fff, 0, 1 },
	{ "ldi",	0xe000, 0x0fff, 0, 1 },
	{ "ser",	0xef0f, 0x00f0, 0, 1 },
	{ "ori",	0x6000, 0x0fff, 0, 1 },
	{ "sbr",	0x6000, 0x0fff, 0, 1 },
	{ "cpi",	0x3000, 0x0fff, 0, 1 },
	{ "sbci",	0x4000, 0x0fff, 0, 1 },
	{ "subi",	0x5000, 0x0fff, 0, 1 },
	{ "sbrc",	0xfc00, 0x01f7, 0, 1 },
	{ "sbrs",	0xfe00, 0x01f7, 0, 1 },
	{ "bld",	0xf800, 0x01f7, 0, 1 },
	{ "bst",	0xfa00, 0x01f7, 0, 1 },
	{ "in",		0xb000, 0x07ff, 1, 1 },
	{ "out",	0xb800, 0x07ff, 1, 1 },
	{ "adiw",	0x9600, 0x00ff, 0, 1 },
	{ "sbiw",	0x9700, 0x00ff, 0, 1 },
	{ "cbi",	0x9800, 0x00ff, 1, 1 },
	{ "sbi",	0x9a00, 0x00ff, 1, 1 },
	{ "sbic",	0x9900, 0x00ff, 1, 1 },
	{ "sbis",	0x9b00, 0x00ff, 1, 1 },
	{ "brcc",	0xf400, 0x03f8, 0, 1 },
	{ "brcs",	0xf000, 0x03f8, 0, 1 },
	{ "breq",	0xf001, 0x03f8, 0, 1 },
	{ "brge",	0xf404, 0x03f8, 0, 1 },
	{ "brhc",	0xf405, 0x03f8, 0, 1 },
	{ "brhs",	0xf005, 0x03f8, 0, 1 },
	{ "brid",	0xf407, 0x03f8, 0, 1 },
	{ "brie",	0xf007, 0x03f8, 0, 1 },
	{ "brlo",	0xf000, 0x03f8, 0, 1 },
	{ "brlt",	0xf004, 0x03f8, 0, 1 },
	{ "brmi",	0xf002, 0x03f8, 0, 1 },
	{ "brne",	0xf401, 0x03f8, 0, 1 },
	{ "brpl",	0xf402, 0x03f8, 0, 1 },
	{ "brsh",	0xf400, 0x03f8, 0, 1 },
	{ "brtc",	0xf406, 0x03f8, 0, 1 },
	{ "brts",	0xf006, 0x03f8, 0, 1 },
	{ "brvc",	0xf403, 0x03f8, 0, 1 },
	{ "brvs",	0xf003, 0x03f8, 0, 1 },
	{ "brbc",	0xf400, 0x03ff, 0, 1 },
	{ "brbs",	0xf000, 0x03ff, 0, 1 },
	{ "rcall",	0xd000, 0x0fff, 0, 1 },
	{ "rjmp",	0xc000, 0x0fff, 0, 1 },
	{ "call",	0x940e, 0x01f1, 0, 2 },
	{ "jmp",	0x940c, 0x01f1, 0, 2 },
	{ "asr",	0x9405, 0x01f0, 0, 1 },
	{ "com",	0x9400, 0x01f0, 0, 1 },
	{ "dec",	0x940a, 0x01f0, 0, 1 },
	{ "inc",	0x9403, 0x01f0, 0, 1 },
	{ "lsr",	0x9406, 0x01f0, 0, 1 },
	{ "neg",	0x9401, 0x01f0, 0, 1 },
	{ "pop",	0x900f, 0x01f0, 0, 1 },
	{ "push",	0x920f, 0x01f0, 0, 1 },
	{ "ror",	0x9407, 0x01f0, 0, 1 },
	{ "swap",	0x9402, 0x01f0, 0, 1 },
	{ "movw",	0x0100, 0x00ff, 0, 1 },
	{ "muls",	0x0200, 0x00ff, 0, 1 },
	{ "mulsu",	0x0300, 0x0077, 0, 1 },
	{ "fmul",	0x0308, 0x0077, 0, 1 },
	{ "fmuls",	0x0380, 0x0077, 0, 1 },
	{ "fmulsu",	0x0388, 0x0077, 0, 1 },
	{ "sts",	0x9200, 0x01f0, 0, 2 },
	{ "lds",	0x9000, 0x01f0, 0, 2 },
	{ "ldd",	0x8000, 0x2dff, 0, 1 },
	{ "ld",		0x8000, 0x11ff, 0, 1 },
	{ "std",	0x8200, 0x2dff, 0, 1 },
	{ "st",		0x8200, 0x11ff, 0, 1 },
	{ "eicall",	0x9519, 0x0000, 0, 1 },
	{ "eijmp",	0x9419, 0x0000, 0, 1 },
	{ ".db",	0x0000, 0xffff, 0, 1 },
	{ "end",	0, 0, 0 }
};

#endif